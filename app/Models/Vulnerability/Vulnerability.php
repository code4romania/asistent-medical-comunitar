<?php

declare(strict_types=1);

namespace App\Models\Vulnerability;

use App\Concerns\HasCaseManagement;
use App\Concerns\HasInterventions;
use App\Enums\Intervention\Status;
use App\Models\Beneficiary;
use Illuminate\Contracts\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Str;

class Vulnerability extends Model
{
    use HasCaseManagement;
    use HasInterventions;

    public $timestamps = false;

    public $incrementing = false;

    protected $keyType = 'string';

    public function category(): BelongsTo
    {
        return $this->belongsTo(VulnerabilityCategory::class);
    }

    public function scopeInCategory(Builder $query, string $category_id): Builder
    {
        return $query->where('category_id', $category_id);
    }

    public function scopeWithInterventionsForBeneficiary(Builder $query, Beneficiary $beneficiary): Builder
    {
        return $query
            ->whereHas('interventions', function (Builder $query) use ($beneficiary) {
                $query->whereBeneficiary($beneficiary);
            })
            ->orWhereHas('cases', function (Builder $query) use ($beneficiary) {
                $query->whereBeneficiary($beneficiary);
            })
            ->with([
                'interventions' => function (Builder $query) use ($beneficiary) {
                    $query->whereBeneficiary($beneficiary)
                        ->with('service', 'appointment');
                },
                'cases' => function (Builder $query) use ($beneficiary) {
                    $query->whereBeneficiary($beneficiary)
                        ->with('appointments')
                        ->withCount([
                            'interventions as interventions_count',
                            'interventions as realized_interventions_count' => function (Builder $query) {
                                $query->where('status', Status::REALIZED->value);
                            },
                        ]);
                },
            ]);
    }

    /**
     * Determine if $code matches valid vulnerability codes.
     */
    public static function isValidCode(array | string | null $code = null): bool
    {
        $code = collect($code);

        return $code->isNotEmpty() && $code->every(
            fn ($code) => ! Str::of($code)
                ->afterLast('_')
                ->endsWith([97, 98, 99])
        );
    }

    public function getColorAttribute(): string
    {
        $colors = collect();

        if (static::isValidCode($this->id)) {
            $colors->push('bg-blue-100');
        } else {
            $colors->push('bg-warning-200');
        }

        if ($this->category->isSubcategory()) {
            $colors->push('bg-opacity-25 hover:bg-opacity-75');
        } else {
            $colors->push('bg-opacity-75 hover:bg-opacity-100');
        }

        return $colors->join(' ');
    }

    public static function cachedList(): Collection
    {
        return Cache::remember('vulnerabilities', MINUTE_IN_SECONDS, function () {
            return static::query()
                ->with('category')
                ->get()
                ->keyBy('id');
        });
    }

    public static function allAsOptions(): Collection
    {
        return static::cachedList()
            ->groupBy('category_id')
            ->map->pluck('name', 'id');
    }

    /**
     * Determine if $code matches known pregnancy vulnerabilities.
     */
    public static function isPregnancy(?string $code = null): bool
    {
        return \in_array($code, ['VGR_01', 'VGR_04']);
    }

    public function getInterventionsCountAttribute(): int
    {
        return $this->cases->count() + $this->interventions->count();
    }

    public function getServicesCountAttribute(): string
    {
        return $this->realized_services_count . '/' . $this->all_services_count;
    }

    public function getAllServicesCountAttribute(): int
    {
        return $this->cases->sum('interventions_count') + $this->interventions->count();
    }

    public function getRealizedServicesCountAttribute(): int
    {
        return $this->cases->sum('realized_interventions_count') + $this->interventions->count();
    }

    public function getAppointmentsCountAttribute(): int
    {
        $fromCases = $this->cases->sum(function ($case) {
            return $case->appointments->count();
        });

        $fromIndividualServices = $this->interventions
            ->whereNotNull('appointment')
            ->count();

        return $fromCases + $fromIndividualServices;
    }
}
