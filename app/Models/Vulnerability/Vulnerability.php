<?php

declare(strict_types=1);

namespace App\Models\Vulnerability;

use App\Concerns\HasInterventions;
use App\Concerns\ModelAsOptions;
use App\Contracts\HasVulnerabilityData;
use App\DataTransferObjects\VulnerabilityData;
use App\DataTransferObjects\VulnerabilityListItem;
use App\Models\Appointment;
use App\Models\Beneficiary;
use App\Models\Intervention;
use Illuminate\Contracts\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Cache;

class Vulnerability extends Model implements HasVulnerabilityData
{
    use ModelAsOptions;
    use HasInterventions;

    public $timestamps = false;

    public $incrementing = false;

    protected $keyType = 'string';

    protected $casts = [
        'is_valid' => 'boolean',
    ];

    public function category(): BelongsTo
    {
        return $this->belongsTo(VulnerabilityCategory::class);
    }

    public function scopeInCategory(Builder $query, string $category_id): Builder
    {
        return $query->where('category_id', $category_id);
    }

    public function scopeWhereIsValid(Builder $query): Builder
    {
        return $query->where('is_valid', true);
    }

    public function scopeWithInterventionsForBeneficiary(Builder $query, Beneficiary $beneficiary): Builder
    {
        return $query
            ->whereHas('interventions', function (Builder $query) use ($beneficiary) {
                $query
                    ->whereRoot()
                    ->whereBeneficiary($beneficiary);
            })
            ->with('interventions', function (Builder $query) use ($beneficiary) {
                $query
                    ->whereRoot()
                    ->whereBeneficiary($beneficiary)
                    ->with('appointments')
                    ->withCount([
                        'interventions',
                        'interventions as realized_interventions_count' => fn (Builder $query) => $query->onlyRealized(),
                    ]);
            })
            ->withCount([
                'appointments' => fn (Builder $query) => $query
                    ->whereBeneficiary($beneficiary, 'appointments')
                    ->countUnique(),
                'interventions' => fn (Builder $query) => $query
                    ->whereBeneficiary($beneficiary, 'interventions'),
            ]);
    }

    public function appointments(): HasManyThrough
    {
        return $this->hasManyThrough(
            Appointment::class,
            Intervention::class,
            'vulnerability_id',
            'id',
            'id',
            'appointment_id'
        );
    }

    /**
     * Determine if $code matches valid vulnerability codes.
     */
    public static function isValidCode(array | string | null $code = null): bool
    {
        if (blank($code)) {
            return false;
        }

        $code = Arr::wrap($code);

        return Cache::driver('array')
            ->rememberForever(
                'vulnerability_check_' . md5(serialize($code)),
                fn () => self::cachedList()
                    ->filter(fn (self $vulnerability) => \in_array($vulnerability->id, $code))
                    ->every(fn (self $vulnerability) => $vulnerability->is_valid)
            );
    }

    public function getColorAttribute(): string
    {
        $colors = collect();

        if ($this->is_valid) {
            $colors->push('bg-warning-200');
        } else {
            $colors->push('bg-blue-100');
        }

        if ($this->category->isSubcategory()) {
            $colors->push('bg-opacity-25 hover:bg-opacity-75');
        } else {
            $colors->push('bg-opacity-75 hover:bg-opacity-100');
        }

        return $colors->join(' ');
    }

    public function getNameWithCategoryAttribute(): string
    {
        return collect([
            $this->category?->name,
            $this->name,
        ])
            ->filter()
            ->join(': ');
    }

    /**
     * Determine if $code matches known pregnancy vulnerabilities.
     */
    public static function isPregnancy(?string $code = null): bool
    {
        return \in_array($code, ['VGR_01', 'VGR_04']);
    }

    public function vulnerabilityData(): VulnerabilityData
    {
        return new VulnerabilityData(
            name: $this->name,
            category: $this->category->name,
            color: $this->color,
            valid: $this->is_valid,
        );
    }

    public function vulnerabilityListItem(): VulnerabilityListItem
    {
        return new VulnerabilityListItem(
            label: $this->name,
            value: $this->id,
            type: $this->getMorphClass(),
            valid: $this->isValidCode($this->id),
        );
    }
}
