<?php

declare(strict_types=1);

namespace App\Models\Vulnerability;

use App\Concerns\HasInterventions;
use App\Concerns\ModelAsOptions;
use App\Enums\Intervention\Status;
use App\Models\Appointment;
use App\Models\Beneficiary;
use App\Models\Intervention;
use App\Models\Intervention\InterventionableIndividualService;
use Illuminate\Contracts\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class Vulnerability extends Model
{
    use ModelAsOptions;
    use HasInterventions;

    public $timestamps = false;

    public $incrementing = false;

    protected $keyType = 'string';

    public function category(): BelongsTo
    {
        return $this->belongsTo(VulnerabilityCategory::class);
    }

    public function scopeInCategory(Builder $query, string $category_id): Builder
    {
        return $query->where('category_id', $category_id);
    }

    public function scopeWithInterventionsForBeneficiary(Builder $query, Beneficiary $beneficiary): Builder
    {
        return $query
            ->whereHas('interventions', function (Builder $query) use ($beneficiary) {
                $query
                    ->whereRoot()
                    ->whereBeneficiary($beneficiary);
            })
            ->with('interventions', function (Builder $query) use ($beneficiary) {
                $query
                    ->whereRoot()
                    ->whereBeneficiary($beneficiary)
                    ->with('appointments')
                    ->withCount([
                        'interventions',
                        'interventions as realized_interventions_count' => fn (Builder $query) => $query
                            ->whereMorphRelation('interventionable', InterventionableIndividualService::class, 'status', Status::REALIZED),
                    ]);
            })
            ->withCount([
                'appointments' => fn (Builder $query) => $query
                    ->whereBeneficiary($beneficiary, 'appointments')
                    ->select(DB::raw(<<<'SQL'
                        COUNT(DISTINCT(appointments.id))
                    SQL)),
                'interventions' => fn (Builder $query) => $query
                    ->whereBeneficiary($beneficiary, 'interventions'),
            ]);
    }

    public function appointments(): HasManyThrough
    {
        return $this->hasManyThrough(
            Appointment::class,
            Intervention::class,
            'vulnerability_id',
            'id',
            'id',
            'appointment_id'
        );
    }

    /**
     * Determine if $code matches valid vulnerability codes.
     */
    public static function isValidCode(array | string | null $code = null): bool
    {
        $code = collect($code);

        return $code->isNotEmpty() && $code->every(
            fn ($code) => ! Str::of($code)
                ->afterLast('_')
                ->endsWith([97, 98, 99])
        );
    }

    public function getColorAttribute(): string
    {
        $colors = collect();

        if (static::isValidCode($this->id)) {
            $colors->push('bg-blue-100');
        } else {
            $colors->push('bg-warning-200');
        }

        if ($this->category->isSubcategory()) {
            $colors->push('bg-opacity-25 hover:bg-opacity-75');
        } else {
            $colors->push('bg-opacity-75 hover:bg-opacity-100');
        }

        return $colors->join(' ');
    }

    /**
     * Determine if $code matches known pregnancy vulnerabilities.
     */
    public static function isPregnancy(?string $code = null): bool
    {
        return \in_array($code, ['VGR_01', 'VGR_04']);
    }
}
